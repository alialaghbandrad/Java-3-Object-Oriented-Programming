/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package day02notepad;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ipd
 */
public class Day02Notepad extends javax.swing.JFrame {

    boolean isDocModified;
    File currentFile;

    /**
     * Creates new form Day02Notepad
     */
    public Day02Notepad() {
        initComponents();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text documents (*.txt)", "txt"));
        // add key listener here, after initComponents();
        taDocument.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent arg0) {
                isDocModified = true;
                updateStatus("Modified");
            }

            @Override
            public void removeUpdate(DocumentEvent arg0) {
                isDocModified = true;
                updateStatus("Modified");
            }

            @Override
            public void changedUpdate(DocumentEvent arg0) {
                isDocModified = true;
                updateStatus("Modified");
            }
        });
    }

    private void updateStatus(String operation) {
        try {
            String isModifiedString = isDocModified ? "*" : "";
            String filenameShort = (currentFile == null) ? "Untitled" : currentFile.getName();
            String filenameLong = (currentFile == null) ? "Untitled" : currentFile.getCanonicalPath();
            //
            setTitle(isModifiedString + filenameShort);
            lblStatus.setText(operation + ": " + isModifiedString + filenameLong);
        } catch (IOException ex) {
            // ignore it
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        dlgStats = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dlgStats_lblNumChars = new javax.swing.JLabel();
        dlgStats_lblNumUppercase = new javax.swing.JLabel();
        dlgStats_lblNumLines = new javax.swing.JLabel();
        dlgStats_lblNumWords = new javax.swing.JLabel();
        dlgStats_btDismiss = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDocument = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miFileOpen = new javax.swing.JMenuItem();
        miFileSave = new javax.swing.JMenuItem();
        miFileSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miFileExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miToolsStatistics = new javax.swing.JMenuItem();

        dlgStats.setResizable(false);

        jLabel1.setText("Total number of characters:");

        jLabel2.setText("Total number of uppercase characters:");

        jLabel3.setText("Total number of lines:");

        jLabel4.setText("Total number of words:");

        dlgStats_lblNumChars.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dlgStats_lblNumChars.setText("0");

        dlgStats_lblNumUppercase.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dlgStats_lblNumUppercase.setText("0");

        dlgStats_lblNumLines.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dlgStats_lblNumLines.setText("0");

        dlgStats_lblNumWords.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dlgStats_lblNumWords.setText("0");

        dlgStats_btDismiss.setText("Dismiss");
        dlgStats_btDismiss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlgStats_btDismissActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgStatsLayout = new javax.swing.GroupLayout(dlgStats.getContentPane());
        dlgStats.getContentPane().setLayout(dlgStatsLayout);
        dlgStatsLayout.setHorizontalGroup(
            dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgStatsLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlgStats_lblNumChars, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dlgStatsLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlgStats_lblNumUppercase, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dlgStatsLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlgStats_lblNumLines, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dlgStatsLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlgStats_lblNumWords, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dlgStatsLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(dlgStats_btDismiss, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        dlgStatsLayout.setVerticalGroup(
            dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dlgStats_lblNumChars))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dlgStats_lblNumUppercase))
                .addGap(18, 18, 18)
                .addGroup(dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dlgStats_lblNumLines))
                .addGap(18, 18, 18)
                .addGroup(dlgStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dlgStats_lblNumWords))
                .addGap(18, 18, 18)
                .addComponent(dlgStats_btDismiss)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(200, 150));
        setPreferredSize(new java.awt.Dimension(600, 450));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblStatus.setText("No file open");
        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(lblStatus, java.awt.BorderLayout.PAGE_END);

        taDocument.setColumns(20);
        taDocument.setRows(5);
        jScrollPane1.setViewportView(taDocument);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        miFileOpen.setText("Open ...");
        miFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miFileOpen);

        miFileSave.setText("Save");
        miFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileSaveActionPerformed(evt);
            }
        });
        jMenu1.add(miFileSave);

        miFileSaveAs.setText("Save as ...");
        miFileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(miFileSaveAs);
        jMenu1.add(jSeparator1);

        miFileExit.setText("Exit");
        miFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileExitActionPerformed(evt);
            }
        });
        jMenu1.add(miFileExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        miToolsStatistics.setText("Statistics");
        miToolsStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miToolsStatisticsActionPerformed(evt);
            }
        });
        jMenu2.add(miToolsStatistics);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileOpenActionPerformed
        // FIXME: check if there are any unsaved changes 
        if (isDocModified) {
            Object[] options = {"Open anyway", "Continue editing"};
            int result = JOptionPane.showOptionDialog(this,
                    "Are you sure you want to open another file?\n"
                    + "You will lose unsaved data in the current document",
                    "Unsaved data",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            if (result != JOptionPane.OK_OPTION) {
                return;
            }
        }
        //
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File chosenFile = fileChooser.getSelectedFile();
            try (Scanner fileInput = new Scanner(chosenFile)) {
                // read the entire file - trick scanner
                fileInput.useDelimiter("\\Z");
                String content = "";
                if (fileInput.hasNext()) {
                    content = fileInput.next();
                }
                taDocument.setText(content);
                taDocument.setEnabled(true);
                currentFile = chosenFile;
                isDocModified = false;
                updateStatus("File opened");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error reading file:\n" + ex.getMessage(),
                        "File error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_miFileOpenActionPerformed

    private void miFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileSaveActionPerformed
        if (currentFile == null) {
            miFileSaveAsActionPerformed(evt);
            return;
        }
        try (PrintWriter fileOutput = new PrintWriter(currentFile)) {
            String content = taDocument.getText();
            fileOutput.print(content);
            isDocModified = false;
            updateStatus("File saved");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error writing file:\n" + ex.getMessage(),
                    "File error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_miFileSaveActionPerformed

    private void miFileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileSaveAsActionPerformed
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File chosenFile = fileChooser.getSelectedFile();
                String chosenFileStr = chosenFile.getCanonicalPath(); // ex
                // Important: append file extension if none was given
                if (!chosenFileStr.matches(".*\\.[^.]{1,10}")) {
                    chosenFileStr += ".txt";
                    chosenFile = new File(chosenFileStr);
                }
                //
                try (PrintWriter fileOutput = new PrintWriter(currentFile)) { // ex
                    String content = taDocument.getText();
                    fileOutput.print(content);
                    isDocModified = false;
                    currentFile = chosenFile;
                    updateStatus("File saved");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error writing file:\n" + ex.getMessage(),
                        "File error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_miFileSaveAsActionPerformed

    private void miFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileExitActionPerformed
        askToSaveChangesOnExit();
    }//GEN-LAST:event_miFileExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        askToSaveChangesOnExit();
    }//GEN-LAST:event_formWindowClosing

    private void miToolsStatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miToolsStatisticsActionPerformed
        dlgStats.pack();
        dlgStats.setVisible(true);
        String doc = taDocument.getText();
        int countChars = doc.length();
        int countUppercase = 0;
        for (int i = 0; i < doc.length(); i++) {
            String oneChar = doc.charAt(i) + "";
            if (oneChar.matches("[A-Z]")) {
                countUppercase++;
            }
        }
        int countLines = doc.split("\n").length;
        // int words - for you to figure out
        dlgStats_lblNumChars.setText(countChars + "");
        dlgStats_lblNumUppercase.setText(countUppercase + "");
        dlgStats_lblNumLines.setText(countLines + "");
        dlgStats_lblNumWords.setText("Figure it out!");
    }//GEN-LAST:event_miToolsStatisticsActionPerformed

    private void dlgStats_btDismissActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlgStats_btDismissActionPerformed
        dlgStats.setVisible(false);
        dlgStats.dispose();
    }//GEN-LAST:event_dlgStats_btDismissActionPerformed

    private void askToSaveChangesOnExit() {
        if (isDocModified) {
            Object[] options = {"Exit anyway", "Cancel"};
            int result = JOptionPane.showOptionDialog(this,
                    "Are you sure you want to exit? You will lose unsaved data",
                    "Unsaved data",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            if (result == JOptionPane.OK_OPTION) {
                dispose(); // close the window
            }
        } else {
            dispose(); // close the window
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day02Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day02Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day02Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day02Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day02Notepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog dlgStats;
    private javax.swing.JButton dlgStats_btDismiss;
    private javax.swing.JLabel dlgStats_lblNumChars;
    private javax.swing.JLabel dlgStats_lblNumLines;
    private javax.swing.JLabel dlgStats_lblNumUppercase;
    private javax.swing.JLabel dlgStats_lblNumWords;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuItem miFileExit;
    private javax.swing.JMenuItem miFileOpen;
    private javax.swing.JMenuItem miFileSave;
    private javax.swing.JMenuItem miFileSaveAs;
    private javax.swing.JMenuItem miToolsStatistics;
    private javax.swing.JTextArea taDocument;
    // End of variables declaration//GEN-END:variables
}
